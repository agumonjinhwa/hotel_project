<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--  begin -->
    <!-- Data Source -->
	   <bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<!-- 1. 스프링이 제공해주는 DataSource구현(오라클 데이터베이스 연결) 클래스 
		중에 간단히 사용할 수 있는 SimpleDriverDataSource 라는 것이 있다. 
		이 클래스를 사용하면 쉽게 오라클을 연결할 수 있다. 
		2. 프로퍼티 네임 driverClass,url,username,password는 
			정해진 이름이다. 바꿀수 없다.
		3. driverClass,url,username,password각 프로퍼티 속성에 value속성값을 전달한다. -->
		<property name="driverClass" value="oracle.jdbc.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		<property name="username" value="night" />
		<property name="password" value="night" />
	  </bean>
	  <!-- 스프링 jdbc 즉 스프링으로 oracle 디비 연결 -->

    <!-- transactionmanager 선언 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 
		DataSourceTransactionManager 클래스 특징
		 1. 트랜잭션을  이용해서 트랜잭션을 관리해주는 트랜잭션 매니저다.
		   이 트랜잭션 매니저를 사용하려면 트랜잭션을 적용할 dataSource 가 스프링의 빈아이디로 등록돼야 한다.	   
		 -->
		<property name="dataSource" ref="dataSource" />
	</bean>    
	
	<!-- Transaction 기본 설정 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<!-- 
	 1. <tx:advice> 태그를 이용한 트랜잭션 처리  
	 2. <tx:advice> 태그는 실제로 트랜잭션을 적용하는 것이 아니므로 AOP를 통해서 설정해야 함
	 3. transaction-manager 속성에는 스프링의 참조할 빈 아이디를 설정
	 -->
	 <tx:attributes>
	 <!-- 
	 1. <tx:attributes> 태그의 자식 태그로 트랜잭션을 설정할 메서드 및 트랜잭션 속성을 설정
	  -->
			<tx:method name="*" propagation="REQUIRED"/>
			<!-- 
			  1.<tx:method> 각 메서드에 대해 어떤 트랜잭션을 속성을 적용할지 설정한다.
		      2. name속성에는 트랜잭션이 적용될 메서드 이름을 명시.
		         name속성값을 *로 지정하면 모든 메서드에 적용. 
		      3. propagation 속성은 트랜잭션 타입을 설정한다.
			  4. propagation="REQUIRED" 적용하면 메서드를 수행하는대 트랜잭션이 필요 하다는 의미이다.
			    현재 진행중인 트랜잭션이 존재하면, 해당 트랜잭션을 사용한다. 존재하지 않는다면 새로운 트랜잭션을 생성한다. -->
			<tx:method name="get*" read-only="true"/> 
			<!-- 
			1. get 으로 시작하는 모든 메서드를 뜻함. 그리고 단지 읽기 속성을 하기
			위해서  true로 설정 
			--> 
		</tx:attributes>
	</tx:advice>	
	
	<!-- AOP 설정을 사용해서 Transaction 적용 -->
	<aop:config>
	<!-- 
	  1.<aop:config> : AOP 설정 정보임을 나타낸다.
	  2. 트랜잭션 적용은 AOP를 통해서 적용된다.
	 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.daum.service.*Service.*(..))"/>
		<!-- 
		1.<aop:advisor>  AOP 어드바이저를 정의 한다.  
		2. advice-ref="txAdvice"  라고 지정하면 tx:advice 빈아이디 txAdvice를 참조한다.
		3. pointcut 속성을 이용해 직접 Pointcut을 작성할 수 있다.
		4. execution 명시자
		   * com.naver.service.*Service.*(..))
		     com.naver.service 패키지의  클래스에 있는 파라미터가 0개 이상인 메서드 호출.
		
		AOP란?
		 1.AOP(Aspect Oriented Programming) 의 약어로 객체 지향 프로그래밍을 잇는 관점 지향 프로그래밍의 또하나의
		 프로그래밍 언어 구조라고 할수 있다. 여러 객체에 공통으로 적용할 수 있는 기능을 구분함으로써 재사용성을 높여주는 
		 프로그래밍 기법이다. 
		 2.스프링 AOP 용어 정리
		   가.Joinpoint : 클래스의 객체 생성 시점,메서드 호출 시점,예외 발생 시점과 같이 어플리케이션을 실행할때
		   특정 작업이 시작되는 시점을 조인포인트라 한다.
		   
		   나. Advice : 조인포인트에 삽입되어져 동작할수 있는 코드를 어드바이스라 한다.
		   다. pointcut: 여러개의 조인포인트를 하나로 결합한 것을 포인트컷이라 한다.
		   라. Advisor : 어드바이스와 포인트컷을 하나로 묶어 취급한 것을 '어드바이저'라고 부른다.
		   마. Weaving : 어드바이스를 핵심 로직 코드에 삽입하는 것을 '위빙'이라 부른다.
		   바. Target : 핵심 로직을 구현하는 클래스를 말한다.		   
		   사. Aspect: 여러 객체에 공통으로 적용되는 기능을 말한다.
	   -->
	</aop:config>		
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 1.mybatis SqlSessionFactoryBean 클래스를 빈아이디 sqlSessionFactory 생성 
		2.dataSource,configLocation,mapperLocations 
			바꿀수 없다.classpath도 바꿀수 없다. -->
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis 에서 dataSource빈아이디명을 호출해서 매핑한다. -->
		<property name="configLocation" value="classpath:com/daum/mybatis-config.xml" />
		<!-- classpath경로는 target/classes을 뜻함. com.naver패키지의 mybatis-config.xml 
			파일을 읽어들임. 프로퍼티 속성 configLocation에 value속성값을 연결.-->
		<property name="mapperLocations" value="classpath:com/daum/mappers/*/*.xml" />
		<!-- 1.이 설정은 com.naver.mappers 패키지 아래와 그 하위 패키지를 모두 검색해서 마이바티스 매퍼 XML파일을 
		모두 로드할 것이다. 
		2. JDBC 와 비교해보면 마이바티스는 코드를 굉장히 단순하게 만들고 깔끔하게 만든다. 이해하기 쉬워서 유지보수도 
		편하게 해준다. 
		3.  mapperLocations 프로퍼티 속성에 value속성값을 연결 저장.-->
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	<!-- mybatis-spring-1.2.3.jar 가 제공하는 mybatis SqlSessionTemplate클래스로 쉽게 mybatis쿼리문 실행객체
	sqlSession을 생성한다. -->
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- 
		  1.constructor-arg index="0"은 생성자를 통한 의존성을 주입하는 것이다.스프링에서는 의존성을 주입하는 방법이
		  setter() 메서드를 통한 인젝션 의존관계를 만들수 있고,생성자를 통해서 의존성을 만들수 있다.
		  여기서는 생성자를 통한 의존성을 만드는 것을 보여주고 있다. 그리고, index="0"의 뜻은 생성자의 매개변수중
		  첫번째 전달인자를 가리킨다.만약 여기에서 <constructor-arg index="0" value="값" />라고 xml을 만들었다면
		  생성자를 통한 의존성을 주입하면서 index="0" 생성자의 첫번째 전달인자에 value속성값을 저장즉 전달하게 된다.
		 -->
	</bean>
	
	<context:component-scan base-package="com.daum.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>	
	<!-- component 빈들을 자동으로 등록 . -->
	 <!--	
	  1.<context:component-scan> base-package 속성에는 클래스를 탐색할 때 패키지를 지정한다. 지정한 패키지의
	   하위 패키지도 스스로 찾는다. 복수 패키지를 지정할 때는 콤마로 구분해서 지정한다. 	 
	   
	 2. <context:include-filter> 태그와 <context:exclude-filter> 태그를 사용하면
         자동스캔 대상에 포함시킬 클래스와 포함시키지 않을 클래스를 구체적으로 명시할 수 있다.
	  
	 3. Type 속성에 올 수 있는 값
         annotation : 클래스에 지정한 어노테이션이 적용됐는지의 여부
         expression 속성에는 "org.springframework.stereotype.Controller"와 같은 컨토롤러 어노테이션 이름을 입력한다.
         
         <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        base-package(com.naver.*)에서 스캔(자동검색)을 할 때 Controller 어노테이션 타입은 제외한다.
        
     4. 모델 DAOImpl 클래스에 @Repository  어노테이션을 부여한다.
	   그리고 xml설정파일에는 <context:component-scan>을 기술하면 스프링 프레임웍이 시작시에 이 어노테이션을
	   부여한 클래스를 찾아서 등록한다. <context:component-scan>을 이용하는 것 만으로도 xml설정파일을 크게 줄일
	   수 있다.
	   모델 DAOImpl 클래스에 @Repository  어노테이션을 부여하고,<context:component-scan>을 사용하면
	   <bean id="memberDao" class="com.naver.dao.MemberDaoImpl">
        <property name="sqlSession" ref="sqlSession" />
      </bean>
       위 xml을 없애고 @Repository 어노테이션을 이용하여 DAOImpl에 의존성 주입할 수 있다.   	
       
     5. 이와 같은 설정을 통해 @Autowired하려는 모든 빈을 등록해줄 수 있다. 
         이 설정은 base-package로 
         등록해 놓은 패키지에 존재하는 어노테이션을
         명시해 놓은 클래스나 메소드, 변수 등을 별도의 설정이나 등록 없이 사용해 줄 수 있다. 
         예를 들어 @Autowired하려는 변수에 객체를 빈을 통해 주입하는 방식을 위의 설정을 통해 
         조금은 설정이 편리해진다.빈을 DI 받기 위한 여타의 작업들을 할 수고를 덜어준다.  
	-->
    <!--  end -->
    
  
    <!-- 자바 메일 발송 -->
   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" /><!-- 보내는 메일 smtp -->
      <property name="username" value="mistral314@gmail.com" /><!-- 관리자 메일 주소 -->
       <property name="password" value="sbniauevaavbbedp" /><!--메일 관리자 인증 비번 -->      
      <property name="port" value="587" /><!-- 멜 포트번호 -->
      <property name="javaMailProperties">
         <props>
            <prop key="mail.transport.protocol">smtp</prop>
            <prop key="mail.smtp.auth">true</prop>
            <prop key="mail.smtp.starttls.enable">true</prop>
            <prop key="mail.debug">true</prop>
         </props>
      </property>
   </bean>
    
    
</beans>
